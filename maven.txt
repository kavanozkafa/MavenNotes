
install on Debian-Linux Dist.
#apt install maven
#mvn --version
#export PATH=/opt/apache-maven-3.6.0/bin:$PATH



What is Maven ?
	Build Tool

Features
	Repository System
	Dependency Management
	Plugins
	Configuration


All of these inside in the POM.xml file
Project Object Model




maven build lifecycle
	validate
	compile
	test
	package
	integration-test
	verify
	install
	deploy







--------------
maven looks at spesific directory templates
for java files -> projcet root-> src->main->java + resources
for test files -> projcet root-> src->test->java + resources

*standart directory setup
-p stands for parent directory
mkdir -p src/main/java
mkdir -p src/main/resources
mkdir -p src/test/resources
mkdir -p src/test/java


for adding directories to git you should add some empty files to the folders:
touch src/main/java/.gitkeep
touch src/main/resources/.gitkeep
touch src/test/resources/.gitkeep
touch src/test/java/.gitkeep



so the you must create forlders for java files according to package 
for example 
package com.sammas;
you must create 
mkdir -p src/main/java/com/sammas


for package
#mvn package

remove previous build results
#mvn clean


for both of them
#mvn clean package



-------------------------------------------
Plugins

Plugins add more functionality and features.
Maven = Plugin Engine (something like that)

some plugins
*Compile soruce code
*Run Unit Tests
*Publish to Artifact Repository
*Deploy to Remote Server
*Publish Documentation



List of all plugins : https://maven.apache.org/plugins/index.html
		
clean 		Clean up after the build. 	
compiler 	Compiles Java sources. 
deploy 	 	Deploy the built artifact to the remote repository. 	
failsafe 	Run the JUnit integration tests in an isolated classloader. 	
install 	Install the built artifact into the local repository. 	
resources 	Copy the resources to the output directory for including in the JAR. 	
site 	 	Generate a site for the current project. 	
surefire 	Run the JUnit unit tests in an isolated classloader. 	
verifier 	Useful for integration tests - verifies the existence of certain conditions. 	



for to add plugin to the project:
select the plugin you wanna add
copy the xml schema from apache plugins page between <build> tags and paste it in the pom.xml file

<build>
    [...]
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.0</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
    </plugins>
    [...]
  </build>






---------------------------------------------


